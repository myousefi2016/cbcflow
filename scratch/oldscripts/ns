#!/usr/bin/env python

__author__ = "Anders Logg <logg@simula.no>"
__date__ = "2008-04-11"
__copyright__ = "Copyright (C) 2008-2010 " + __author__
__license__  = "GNU GPL version 3 or any later version"

import sys, time
from dolfin import set_log_active, parameters, list_timings, interactive, MPI, warning

from problems import Problem, problems
from solvers import Solver, solvers

# List of mesh sizes
mesh_sizes = [8, 11, 16, 23, 32, 45, 64, 91, 128, 181, 256, 362]
if len(sys.argv) > 1 and sys.argv[1] in ['channel', 'g2ref']:
    mesh_sizes = [7, 11, 15, 23, 31, 45, 63, 91, 127, 181, 255, 362]

master = MPI.process_number() == 0

import os
if master:
    print
    print "PATH variable is:"
    print os.environ["PATH"]
    print

# Default options
OPTIONS = {"refinement_level": 0,
           "dt_division": 0,
           "save_solution": False,
           "save_frequency": 100,
           "save_number": None, # max number of saves in total, at fixed frequency
           "check_mem_usage": False,
           "check_frequency": 10,
           "save_solution_at_t=T": False,
           "save_xml": False,
           "plot_solution": False,
           "plot_functional": False,
           "compute_stress": False,
           "compute_divergence": False,
           "debug": True,
           "segregated": False,
           "timer": False,
           "krylov_solver_absolute_tolerance": 1e-25,
           "krylov_solver_relative_tolerance": 1e-12,
           "krylov_solver_monitor_convergence": False,

           "casename": None,
           "postfix": None,
           "dt": None,
           "T": None,

           # Used for restarting a solution at a given time
           "restart_time": None,
           "restart_timestep": None,
           "restart_casename": None,

           # Parameters for specific problems or solvers. If these become used
           # in more places, please move them out of this section, and maybe
           # change the default to None (i.e., move the default to the problem)
           # if there is no sensible common default.

           # ipcs solvers
           "solver.u_tent": "gmres,hypre_euclid",
           "solver.p_neumann": "gmres,hypre_amg",
           "solver.p_dirichlet": "gmres,ml_amg",
           "solver.p": None, # overrides neumann/dirichlet if given
           "solver.u_corr": "bicgstab,hypre_euclid",
          }


def save_results(case_dir, problem, solver, num_dofs, cputime, wct, functional, dt_division, error):
    "Save results to file."

    # Print summary
    if master:
        print ""
        print "Problem    |", problem
        print "Solver     |", solver
        print "Unknowns   |", num_dofs
        print "CPU time   |", cputime
        print "WCT time   |", wct
        print "Overhead   |", wct - cputime
        print "Functional |", functional
        print "Error      |", error
        try:
            if error != functional:
                errpct = 100*error/functional
                print "Error (%)  |", errpct
        except:
            pass

        # Print DOLFIN summary
        set_log_active(True)
        list_timings()

        # Append to file
        filename = os.path.join(case_dir, "results.log")
        try:
            with open(filename, "a") as file:
                file.write("%s, %s, %s, %d, %.15g, %.15g, %.15g, %s, %s\n" %
                           (time.asctime(), problem, solver, num_dofs, cputime, wct,
                            functional, str(dt_division) , str(error)))
        except Exception as e:
            warning("Failed to write final results to log file: %s"%str(e))

def usage():
    "Print usage"
    if master:
        print "Usage: ns problem solver\n\nAvailable problems:\n"
        print "\n".join("  " + p for p in problems)
        print "\nAvailable solvers:\n"
        print "\n".join("  " + s for s in solvers)

def main(args):
    "Parse command-line arguments and run solver"

    # Check arguments
    if not len(args) >= 2:
        usage()
        return 2

    # Get problem and solver
    problem_name, solver_name = args[:2]

    # Get options
    options = OPTIONS.copy()
    for arg in args[2:]:
        key, value = arg.split("=")
        if master and not key in options:
            warning("Unknown command-line argument: %s"%arg)
        try:
            options[key] = eval(value)
        except:
            options[key] = value

    for key, value in options.iteritems():
        if key.startswith("solver.") and isinstance(value, str):
            options[key] = value.split(',')

    # Set global DOLFIN parameters
    parameters["form_compiler"]["cpp_optimize"] = True
    parameters["krylov_solver"]["absolute_tolerance"] = options["krylov_solver_absolute_tolerance"]
    parameters["krylov_solver"]["relative_tolerance"] = options["krylov_solver_relative_tolerance"]
    parameters["krylov_solver"]["monitor_convergence"] = options["krylov_solver_monitor_convergence"]

    # Set debug level
    set_log_active(options["debug"])

    # Set refinement level
    options["N"] = mesh_sizes[options["refinement_level"]]

    # Set refinement level
    dt_division = str(options["dt_division"])

    # Create problem and solver
    if master: print "Making problem..."
    problem = Problem(problem_name, options)
    if master: print "Making solver..."
    solver = Solver(solver_name, options)
    if master:
        print "Problem: " + str(problem)
        print "Solver:  " + str(solver)

    # Lazy attempt at keeping compatibility with old way
    if options["casename"] is None:
        options["casename"] = solver.prefix(problem) + \
            "_refinement_level_"+ str(options["refinement_level"])

    if options["postfix"] is None:
        options["casename_full"] = options["casename"]
    else:
        options["casename_full"] = options["casename"]+"_"+options["postfix"]

    # Make directory for result files
    casedir = os.path.join("results", options["casename_full"])
    options["casedir"] = casedir
    if master:
        if not os.path.exists(casedir):
            os.mkdir(casedir)
            print "Made case directory '%s'" % casedir
        else:
            print "NB! Directory already exists: '%s'." % casedir

    # Solve problem with solver
    wct = time.time()
    if options["restart_timestep"] is not None:
        from solvers.restartinfo import RestartInfo
        restart = RestartInfo(options["restart_casename"] or options["casename_full"],
                              timestep=options["restart_timestep"])
        if master:
            print "Restarting from timestep %d (time %.3g)" % (restart.timestep, restart.t)
        u, p = solver.solve(problem, restart)
    elif options["restart_time"] is not None:
        from solvers.restartinfo import RestartInfo
        restart = RestartInfo(options["restart_casename"] or options["casename_full"],
                              t=options["restart_time"])
        if master:
            print "Restarting from timestep %d (time %.3g)" % (restart.timestep, restart.t)
        u, p = solver.solve(problem, restart)
    else:
        u, p = solver.solve(problem)

    # Compute elapsed time
    wct = time.time() - wct

    # Compute number of degrees of freedom
    if options['segregated']:
        num_dofs = sum(_u.vector().size() for _u in u) + p.vector().size()
    else:
        num_dofs = u.vector().size() + p.vector().size()

    # Get functional value and error.
    functional, error = solver.eval()

    # Save results
    save_results(casedir, problem, solver, num_dofs, solver.cputime(), wct, functional, dt_division, error)

    if options['plot_solution']:
        interactive()

    return 0

if __name__ == "__main__":
    args = sys.argv[1:]
    if master: print "Running main with args", args
    result = main(args)
    if master: print "Result from main is", result
    sys.exit(result)
