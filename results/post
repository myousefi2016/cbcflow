#!/usr/bin/env python

from pylab import *

filename = "results.log" 

text = open(filename, "r").read()

data = {}

# Extract data
for line in text.split("\n"):
	
	# Read data
	if not "," in line:
		continue
	
	date, problem, solver, num_dof, cputime, wct,func, dt_ref, error= line.split(",")
	date = date.strip()
	problem = problem.strip()
	solver = solver.strip()
	num_dof = int(num_dof)
	cputime = float(cputime)
	func = (float(func))
	error =float(error)
	
	# Save data
	if not problem in data:
		data[problem] = {}
	if not solver in data[problem]:
		data[problem][solver] = []
	data[problem][solver].append((num_dof, cputime, error,func))

# Plot data
for (i, problem) in enumerate(data):

		
	# Create new plot window
	figure(i)
	title(problem,fontsize=15, color='black')
	solvers = []
	
	# Plot results for each solver
	for solver in data[problem]:
		
		datapoints = data[problem][solver]
		num_dofs = [num_dof    for (num_dof, cputime, error,func) in datapoints]
		cputimes = [cputime    for (num_dof, cputime, error,func) in datapoints]
		errors   = [error      for (num_dof, cputime, error,func) in datapoints]
		funcs    = [func       for (num_dof, cputime, error,func) in datapoints]
		
		#print solver
		if solver == "Chorin":
			tags = 'r-v'
		if solver == "CSS1":
			tags = 'y-^'
		if solver == "CSS2":
			tags = 'g-D'
		if solver == "IPCS":
			tags = 'c-o'
		if solver == "GRPC":
			tags = 'k-s'
		if solver == "G2":
			tags = 'b-p'


		if problem[0:5] == 'Cylin':
			subplot(211)
			loglog(num_dofs, cputimes, tags, linewidth=3, ms=10, alpha=1.0)
			ylabel("CPU time",fontsize=15, color='black')
			grid(True)
			
			subplot(212)
			subplot(223)
			plot(num_dofs, funcs, tags, linewidth=3, ms=10, alpha=1.0)
			ylabel("Functional",fontsize=15, color='black')
			grid(True)
		
			subplot(224)
			plot(num_dofs, funcs, tags, linewidth=3, ms=10, alpha=1.0)
			ylabel("Functional",fontsize=15, color='black')
			grid(True)
			
			
		elif problem[0:5] == 'Aneur':
			subplot(211)
			loglog(num_dofs, cputimes, tags, linewidth=3, ms=10, alpha=1.0)
			ylabel("CPU time",fontsize=15, color='black')
			grid(True)
			
			subplot(212)
			loglog(num_dofs, errors, tags, linewidth=3, ms=10, alpha=1.0)
			ylabel("Functional",fontsize=15, color='black')
			grid(True)

			
		else:
			subplot(211)
			loglog(num_dofs, cputimes, tags, linewidth=3, ms=10, alpha=1.0)
			ylabel("CPU time",fontsize=15, color='black')
			grid(True)
			
			subplot(212)
			loglog(num_dofs, errors, tags, linewidth=3, ms=10, alpha=1.0)
			ylabel("Errors",fontsize=15, color='black')
			grid(True)
			
		xlabel("Degrees of freedom",fontsize=15, color='black')

		if False:

			ref_start = 1
			ref_stop  = 4
			foc = 10000*array(num_dofs[ref_start:ref_stop])**-1.0
			loglog(num_dofs[ref_start:ref_stop], foc, 'k')
			soc = 10000*array(num_dofs[ref_start:ref_stop])**-2.0
			loglog(num_dofs[ref_start:ref_stop], soc, 'k')
			toc = 10000*array(num_dofs[ref_start:ref_stop])**-3.0
			loglog(num_dofs[ref_start:ref_stop], toc, 'k')								
	
		solvers.append(solver)
		
		

			
		subplot(211)
		legend(solvers, loc=2)
		subplot(212)
		legend(solvers, loc=3)
	
#print data
	
show()