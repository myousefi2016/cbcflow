__author__ = "Oeyvind Evju <oyvinev@simula.no>"
__date__ = "2013-10-18"
__copyright__ = "Copyright (C) 2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"


from .parameterized import Parameterized
from .paramdict import ParamDict
from .nsproblem import NSProblem
from .spaces import NSSpacePoolSplit
import pickle
import os
from dolfin import HDF5File, Mesh, Function


class NSReplay(Parameterized):
    """ Replay class for postprocessing exisiting solution data. """
    def __init__(self, postprocessor, params=None):
        Parameterized.__init__(self, params)
        self.postproc = postprocessor
        
    @classmethod
    def default_params(cls):
        params = ParamDict(
            mesh_file = '',
            )
        return params
       
    def replay(self):
        "Replay problem with given postprocessor."
        # Initiate problem
        paramfile = open(self.postproc.params.casedir+"/params.pickle", 'rb')
        params = pickle.load(paramfile)
        
        # FIXME: This is for debugging
        params.problem.num_periods = None
        
        problem = NSProblem(params.problem)
                
        # Read u, p
        assert(os.path.isfile(self.postproc.params.casedir+"/Velocity/metadata.txt"))
        assert(os.path.isfile(self.postproc.params.casedir+"/Velocity/Velocity.hdf5"))
        assert(os.path.isfile(self.postproc.params.casedir+"/Pressure/metadata.txt"))
        assert(os.path.isfile(self.postproc.params.casedir+"/Pressure/Pressure.hdf5"))
        
        solution_data = {}
        # Read u
        u_metadata = open(self.postproc.params.casedir+"/Velocity/metadata.txt", 'r')
        for line in u_metadata.readlines():
            if "save_count" not in line:
                continue
            
            splitline = line.split('\t')
            timestep = int(splitline[1].split('=')[1])
            time = float(splitline[2].split('=')[1])
            dataset = str(splitline[3].split('=')[1]).replace("'", '').replace('\n', '')
            
            solution_data[timestep] = {"t": time, "u_dataset": dataset, "p_dataset": None}
            
        p_metadata = open(self.postproc.params.casedir+"/Pressure/metadata.txt", 'r')
        for line in p_metadata.readlines():
            if "save_count" not in line:
                continue
            
            splitline = line.split('\t')
            timestep = int(splitline[1].split('=')[1])
            time = float(splitline[2].split('=')[1])
            dataset = str(splitline[3].split('=')[1]).replace("'", '').replace('\n', '')
            #print timestep
            if timestep in solution_data:
                solution_data[timestep]["p_dataset"] = dataset
            else:
                solution_data[timestep] = {"t": time, "u_dataset": None, "p_dataset": dataset}
        
        # Read mesh
        if self.params.mesh_file != '':
            mesh = Mesh(self.params.mesh_file)
        else:
            mesh = Mesh()
            HDF5File(self.postproc.params.casedir+"/Pressure/Pressure.hdf5", 'r').read(mesh, "Mesh")
        problem.mesh = mesh
        
        spaces = NSSpacePoolSplit(mesh, params.scheme.u_degree, params.scheme.p_degree)
        
        u = Function(spaces.V)
        p = Function(spaces.Q)
        u_hdf5 = HDF5File(self.postproc.params.casedir+"/Velocity/Velocity.hdf5", 'r')
        p_hdf5 = HDF5File(self.postproc.params.casedir+"/Pressure/Pressure.hdf5", 'r')
        for timestep in sorted(solution_data.keys()):
            u_hdf5.read(u, solution_data[timestep]["u_dataset"])
            p_hdf5.read(p, solution_data[timestep]["p_dataset"])
            self.postproc.update_all({"Velocity": u, "Pressure": p}, solution_data[timestep]["t"], timestep, spaces, problem)

