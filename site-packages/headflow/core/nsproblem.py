from __future__ import division
__author__ = "Martin Alnaes <martinal@simula.no> and Oeyvind Evju <oyvinev@simula.no>"
__date__ = "2013-04-26"
__copyright__ = "Copyright (C) 2013-2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

import ufl

from .paramdict import ParamDict
from .parameterized import Parameterized

class NSProblem(Parameterized):
    """Base class for all Navier-Stokes problems.

    TODO: Document new interface.
    """

    def __init__(self, params=None):
        Parameterized.__init__(self, params)

    @classmethod
    def default_base_params(cls):
        # TODO: Set parameters here that are expected by schemes.
        #       The below parameters are just suggestions, if enabled
        #       we should start using them in the demo problems.
        params = ParamDict(
            # Time parameters:
            #T0=0.0, # Initial time
            T=1.0,  # End time
            dt=0,   # Timestep, 0 means estimate
            # Physical parameters:
            #U=0,    # Characteristic velocity, 0 means unknown
            #mu=1.0,    # Kinematic viscosity in [unit???]
            #rho=1.0,    # Density in [unit???]
            )
        return params

    def initial_conditions(self, V, Q):
        "TODO: Document expected initial_conditions behaviour here."
        raise NotImplementedError("initial_conditions must be overridden in subclass")

    def boundary_conditions(self, V, Q, t):
        "TODO: Document expected boundary_conditions behaviour here."
        raise NotImplementedError("boundary_conditions must be overridden in subclass")

    @property
    def ds(self):
        return ufl.ds[self.mesh.domains().facet_domains()]

    @property
    def dS(self):
        return ufl.dS[self.mesh.domains().facet_domains()]

    @property
    def dx(self):
        return ufl.dx[self.mesh.domains().cell_domains()]
