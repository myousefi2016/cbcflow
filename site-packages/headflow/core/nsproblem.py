from __future__ import division
__author__ = "Martin Alnaes <martinal@simula.no> and Oeyvind Evju <oyvinev@simula.no>"
__date__ = "2013-04-26"
__copyright__ = "Copyright (C) 2013-2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

import ufl

from .paramdict import ParamDict
from .parameterized import Parameterized
from ..dol import Constant

class NSProblem(Parameterized):
    """Base class for all Navier-Stokes problems.

    TODO: Document new interface.
    """

    def __init__(self, params=None):
        Parameterized.__init__(self, params)

    @classmethod
    def default_base_params(cls):
        # TODO: Set parameters here that are expected by schemes.
        #       The below parameters are just suggestions, if enabled
        #       we should start using them in the demo problems.
        params = ParamDict(
            # Time parameters:
            T0=0.0, # Initial time (0 default is the common choice)
            T=None, # End time
            dt=None, # Timestep

            # Physical parameters:
            mu=None,    # Kinematic viscosity in [unit???]
            rho=None,    # Density in [unit???]
            )
        return params

    def initialize_geometry(self, mesh, facet_domains=None, cell_domains=None):
        # Store geometry properties
        self.mesh = mesh
        self.facet_domains = facet_domains
        self.cell_domains = cell_domains

        # Fetch domains from mesh if necessary and avaiable
        domains = mesh.domains()
        if domains is not None:
            if self.facet_domains is None:
                self.facet_domains = domains.facet_domains()
            if self.cell_domains is None:
                self.cell_domains = domains.cell_domains()

        # Attach domains to measures for convenience
        self.ds = ufl.ds if self.facet_domains is None else ufl.ds[self.facet_domains]
        self.dS = ufl.dS if self.facet_domains is None else ufl.dS[self.facet_domains]
        self.dx = ufl.dx if self.cell_domains  is None else ufl.dx[self.cell_domains]

    def observations(self, spaces, t):
        """Return observations of velocity for optimization problem.

        Can be ignored for non-control problems.

        TODO: Document expected observations behaviour here.
        """
        return []

    def controls(self, spaces):
        """Return controls for optimization problem.

        Can be ignored for non-control problems.

        TODO: Document expected controls behaviour here.
        """
        return []

    def initial_conditions(self, V, Q):
        "TODO: Document expected initial_conditions behaviour here."
        raise NotImplementedError("initial_conditions must be overridden in subclass")

    def boundary_conditions(self, V, Q, t):
        "TODO: Document expected boundary_conditions behaviour here."
        raise NotImplementedError("boundary_conditions must be overridden in subclass")

    def body_force(self, V):
        "TODO: Document expected body_force behaviour here."
        d = self.mesh.topology().dim()
        return [Constant(0) for _ in xrange(d)]
