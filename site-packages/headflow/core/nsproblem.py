from __future__ import division
__author__ = "Anders Logg <logg@simula.no>"
__date__ = "2008-03-19"
__copyright__ = "Copyright (C) 2008-2010 " + __author__
__license__  = "GNU GPL version 3 or any later version"

# Modified by Kent-Andre Mardal, 2008.

from dolfin import *
from math import *

from .paramdict import ParamDict
from .parameterized import Parameterized

from .utils import parallel_eval, headflow_warning

class NSProblem(Parameterized):
    """Base class for all Navier-Stokes problems.

    FIXME: Clean up and document new interface.
    """

    def __init__(self, params=None):
        Parameterized.__init__(self, params)

    @classmethod
    def default_base_params(cls):
        params = ParamDict()
        return params

    ###### Problem name functions

    @classmethod
    def shortname(cls):
        "Get a one-word description of the problem. By default uses class name."
        return cls.__name__

    @classmethod
    def description(cls):
        "Get a one-sentence description of the problem. By default uses first line of class docstring."
        return cls.__doc__.split('\n')[0]

    ###### Initial and boundary conditions interface

    def initial_conditions(self, V, Q):
        raise NotImplementedError("initial_conditions must be overridden in subclass")

    def boundary_conditions(self, V, Q, t):
        raise NotImplementedError("boundary_conditions must be overridden in subclass")


    ###### Old code

    def update_problem(self, t, u, p):
        "Update problem at time t"

        # Update state
        self.t = t
        self.u = u
        self.p = p

        # Call problem-specific update
        self.update(t, u, p)

    def update(self, t, u, p):
        "Problem-speficic update at time t"
        pass

    def functional(self, t, u, p):
        "Return value of functional of interest"
        return 0.0

    def reference(self, t):
        "Return reference value for functional"
        return None

    def tolerance(self, problem):
        "Return tolerance (used as local convergence criterion)."
        return 1e-6

    def preconditioner_name(self):
        "Return name of preconditioner."
        return "ilu"

    def pressure_bc(self, Q):
        headflow_warning("Using default pressure 0, please set pressure bc in boundary_conditions()")
        return Constant(0)
