from __future__ import division
__author__ = "Martin Alnaes <martinal@simula.no>"
__date__ = "2013-04-26"
__copyright__ = "Copyright (C) 2013-2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

from .utils import headflow_print
from dolfin import MPI
from numpy import linspace

def compute_cfl_timestep(problem, scale=0.2):
    """Computes estimate of timestep using cfl condition

    dt < c*(h/U) with a scaling parameter c, which defaults to 0.2."""
    # This is not tested, assumes certain parameters for the problem:
    T = problem.params.T
    U = problem.params.U
    mu = problem.params.mu
    rho = problem.params.rho
    nu = mu / rho
    h = MPI.min(problem.mesh.hmin())
    dt = scale * (h / U)
    return dt

def round(x):
    return int(x + 0.5)

def compute_dt(problem):
    "Return timestep if given or cfl estimate if missing."
    dt = problem.params.dt
    if dt <= 0:
        dt = compute_cfl_timestep(problem)
    return dt

def compute_regular_timesteps(problem):
    """Compute fixed timesteps for problem.

    Returns (dt, t0, timesteps), where timesteps does not include t0.
    """
    # Get the time range for the problem
    T0 = 0.0
    T = problem.params.T

    # Either the timestep is given or we estimate it
    dt = compute_dt(problem)

    # Compute regular timesteps, not including t0
    num_intervals = round((T-T0)/dt)
    timesteps = linspace(T0, T, num_intervals+1)[1:]

    return dt, T0, timesteps
