__author__ = "Martin Sandve Alnaes <martinal@simula.no>"
__date__ = "2013-03-31"
__copyright__ = "Copyright (C) 2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

from .paramdict import ParamDict
from .parameterized import Parameterized

def update_check(ppfield, t, timestep):

    # Limit by timestep interval
    s = ppfield.params.timeparams.start_timestep
    e = ppfield.params.timeparams.end_timestep
    #if s > timestep or timestep > e:
    if not (s <= timestep <= e):
        return False

    # Limit by time interval
    s = ppfield.params.timeparams.start_time
    e = ppfield.params.timeparams.end_time
    #if s > t or t > e:
    eps = 1e-10
    if not (s-eps <= t <= e+eps):
        return False

    # Limit by frequency (accept if no previous data)
    datadict = ppfield.get_data()
    if datadict:
        if timestep - datadict["timestep"] < ppfield.params.timeparams.step_frequency:
            return False
        if t - datadict["time"] < ppfield.params.timeparams.time_frequency:
            return False

    # Accept!
    return True

class NSPostProcessor(Parameterized):
    "Baseclass for Navier-Stokes solution postprocessors."
    def __init__(self, params=None):
        Parameterized.__init__(self, params)

        self.list_all = []

    @classmethod
    def default_base_params(cls):
        params = ParamDict(
            casedir="",
            )
        return params

    def update_all(self, u, p, t, timestep, problem):
        for field in self.list_all:
            if update_check(field, t, timestep):
                if field.update_count == 0:
                    field.before_first_update(u,p,t,timestep, problem)
                field.update(u,p,t,timestep, problem)
                field.update_count += 1

    def add_field(self, field):
        self.list_all.append(field)
        field.savefolder = self.params.casedir

    def add_fields(self, fields):
        for field in fields:
            self.add_field(field)
