
import dolfin
from ..dol import *

def show_problem(problem, interactive=True, bc_snapshots=3):
    """Display properties of the problem.

    Intended for inspecting and debugging the problem setup.
    This functions runs through most of the interface
    """

    # Print params
    print("Problem parameters for problem of class %s:" % problem.__class__.__name__)
    print(str(problem.params))

    # Show the mesh
    plot(problem.mesh, title="Mesh")

    # Show eventual boundary markers from mesh
    # TODO: Interface for specifying facet domains without mesh attachment?
    d = problem.mesh.domains()
    if d is not None:
        fd = d.facet_domains()
        if fd is not None:
            plot(fd, title="Facet domains")

    # Make linear function spaces suitable for plotting
    V = VectorFunctionSpace(problem.mesh, "CG", 1)
    Q = VectorFunctionSpace(problem.mesh, "CG", 1)

    # Plot body force
    f = as_vector(problem.body_force(V))
    plot(f, title="Body force", mesh=problem.mesh)

    # Plot initial conditions
    u0, p0 = problem.initial_conditions(V, Q)
    plot(as_vector(u0), title="Initial velocity", mesh=problem.mesh)
    plot(p0, title="Initial pressure", mesh=problem.mesh)

    # Plot a few snapshots of boundary conditions
    for i in range(bc_snapshots):
        t = problem.params.T0 + (problem.params.T-problem.params.T0)*i/(bc_snapshots-1)
        bcu, bcp = problem.boundary_conditions(V, Q, t)

        # Plot velocity BCs
        for j, (u,D) in enumerate(bcu):
            D = "subdomain %d " if isinstance(D, int) else ""
            title = "Velocity BC #%d on %sat t=%g" % (j, D, t)
            plot(as_vector(u), title=title, mesh=problem.mesh)

        # Plot pressure BCs
        for j, (p,D) in enumerate(bcp):
            D = "subdomain %d " if isinstance(D, int) else ""
            title = "Pressure BC #%d on %sat t=%g" % (j, D, t)
            plot(p, title=title, mesh=problem.mesh)

    if interactive:
        dolfin.interactive()
