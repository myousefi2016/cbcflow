__author__ = "Martin Sandve Alnaes <martinal@simula.no>"
__date__ = "2013-03-22"
__copyright__ = "Copyright (C) 2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

def default_params():
    # FIXME: Figure out new parameter structure for solvers

    # Default options from old nsbench code
    OPTIONS = {
           "refinement_level": 0,
           "dt_division": 0,
           "save_solution": False,
           "save_frequency": 100,
           "save_number": None, # max number of saves in total, at fixed frequency
           "check_mem_usage": False,
           "check_frequency": 10,
           "save_solution_at_t=T": False,
           "save_xml": False,
           "plot_solution": False,
           "plot_functional": False,
           "compute_stress": False,
           "compute_divergence": False,
           "debug": True,
           "segregated": False,
           "timer": False,
           "krylov_solver_absolute_tolerance": 1e-25,
           "krylov_solver_relative_tolerance": 1e-12,
           "krylov_solver_monitor_convergence": False,

           "casename": None,
           "postfix": None,
           "dt": None,
           "T": None,

           # Used for restarting a solution at a given time
           "restart_time": None,
           "restart_timestep": None,
           "restart_casename": None,

           # Parameters for specific problems or solvers. If these become used
           # in more places, please move them out of this section, and maybe
           # change the default to None (i.e., move the default to the problem)
           # if there is no sensible common default.

           # ipcs solvers
           "solver.u_tent": "gmres,hypre_euclid",
           "solver.p_neumann": "gmres,hypre_amg",
           "solver.p_dirichlet": "gmres,ml_amg",
           "solver.p": None, # overrides neumann/dirichlet if given
           "solver.u_corr": "bicgstab,hypre_euclid",

           # Parameters added to get new framework to run
           "N": 16,
          }

    return OPTIONS

def extend_default_parameters(params):
    # TODO: Make this recursive, maybe use ParamDict I have lying around somewhere, or maybe using dolfin parameter system
    p = default_params()
    if params:
        p.update(params)
    return p

def parse_cmdline_params(args):
    p = default_params()
    # FIXME: Parse commandline arguments into argument dict
    return p
