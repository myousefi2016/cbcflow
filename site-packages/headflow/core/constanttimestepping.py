from __future__ import division
__author__ = "Oeyvind Evju <oyvinev@simula.no>"
__date__ = "2013-05-23"
__copyright__ = "Copyright (C) 2013-2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

from .parameterized import Parameterized
from .paramdict import ParamDict

class ConstantTimestepping(Parameterized):
    def __init__(self, params):
        Parameterized.__init__(self, params)
        self.t = self.params.T0
        self.timestep = self.params.timestep0
        
        self.dt = self.params.dt
        
        eps = 1e-12
        self.T = self.params.T
        self.T0 = self.params.T0
    
    @classmethod
    def default_base_params(cls):
        params = ParamDict(
            T = 1,
            dt = 1e-4,
            
            # Parameters for restart
            T0 = 0,
            timestep0 = 0,
            )
        return params
    
    def __iter__(self):
        return self
    
    def next(self):
	eps = 1e-12
        if self.t <= self.T - eps:
            self.t += self.dt
            self.timestep += 1
            return self.t, self.timestep           
        else:
            raise StopIteration
        
    def current(self):
        return self.t, self.timestep
        
    def __len__(self):
        return int((self.T-self.T0)/self.dt)
