__author__ = "Martin Sandve Alnaes <martinal@simula.no>"
__date__ = "2013-03-22"
__copyright__ = "Copyright (C) 2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

from .paramdict import ParamDict
from .parameterized import Parameterized

class NSSolver(Parameterized):
    "High level Navier-Stokes solver."
    def __init__(self, problem, scheme=None, postprocessor=None, params=None):
        Parameterized.__init__(self, params)

        self.problem = problem
        self.scheme = scheme
        self.postprocessor = postprocessor

    @classmethod
    def default_base_params(cls):
        # TODO: Insert generic nssolver params here
        params = ParamDict(debug=False)
        return params

    def solve(self):

        # FIXME: Handle restart stuff, get from old ns script (see scratch/oldscripts/ns)
        # FIXME: Pick other details to reuse from old ns script, here or other places

        self.scheme.solve(self.problem, self.update)

    def update(self, u, p, t, timestep):
        if self.postprocessor:
            self.postprocessor.update_all(u, p, t, timestep, self.problem)
        
