__author__ = "Martin Sandve Alnaes <martinal@simula.no>"
__date__ = "2013-03-22"
__copyright__ = "Copyright (C) 2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

from .paramdict import ParamDict
from .parameterized import Parameterized
from time import time
from dolfin import plot
from .utils import getMyMemoryUsage, time_to_string, headflow_print

class NSSolver(Parameterized):
    "High level Navier-Stokes solver."
    def __init__(self, problem, scheme=None, postprocessor=None, params=None):
        Parameterized.__init__(self, params)

        self.problem = problem
        self.scheme = scheme
        self.postprocessor = postprocessor

    @classmethod
    def default_base_params(cls):
        # TODO: Insert generic nssolver params here
        params = ParamDict(
            debug=False,
            plot_solution=False,
            check_mem_usage=False,
            # restart = False, # Not yet supported
            # restart_time = 0.0, # Not yet supported
            # restart_timestep = 0, # Not yet supported
            )
        return params

    def solve(self):

        # FIXME: Handle restart stuff, get from old ns script (see scratch/oldscripts/ns)
        # FIXME: Pick other details to reuse from old ns script, here or other places

        self._reset_timing()

        self.scheme.solve(self.problem, self.update)

    def _reset_timing(self):
        self._initial_time = time()
        self._time = time()
        self._total_time = 0

    def _update_plot(self, u, p):
        if self.params.plot_solution:
            plot(u)
            plot(p)

    def update(self, u, p, t, timestep):
        # Time since last update equals the time for scheme solve
        time_at_top = time()
        solve_time = time_at_top - self._time

        # Run postprocessor
        if self.postprocessor:
            self.postprocessor.update_all(u, p, t, timestep, self.problem)
        pp_time = time() - time_at_top

        # Update time spent (skip first step where jit compilation dominates)
        if timestep > 0:
            self._total_time += solve_time
            self._total_time += pp_time

        # Plot solution
        self._update_plot(u, p)

        # Report timing of this step
        msg = ("Timestep %5d finished (t=%.2e, %.1f%%) in %3.1fs (solve: %3.1fs). Time spent: %s Time remaining: %s" \
                                       % (timestep,
                                          t,
                                          100*t/self.problem.T,
                                          solve_time + pp_time,
                                          solve_time,
                                          time_to_string(self._total_time),
                                          time_to_string(self._total_time*(self.problem.T-t)/t),
                                          ))
        # TODO: Report to file, with additional info like memory usage
        headflow_print(msg)

        # Store time at end of update
        self._time = time()
