__author__ = "Martin Sandve Alnaes <martinal@simula.no>"
__date__ = "2013-03-22"
__copyright__ = "Copyright (C) 2013 " + __author__
__license__  = "GNU GPL version 3 or any later version"

from .paramdict import ParamDict
from .parameterized import Parameterized
from time import time
from dolfin import plot, norm, tic, toc
from .utils import getMyMemoryUsage, time_to_string, headflow_print

class NSSolver(Parameterized):
    "High level Navier-Stokes solver."
    def __init__(self, problem, scheme=None, postprocessor=None, params=None):
        Parameterized.__init__(self, params)

        self.problem = problem
        self.scheme = scheme
        self.postprocessor = postprocessor
        
    @classmethod
    def default_base_params(cls):
        # TODO: Insert generic nssolver params here
        params = ParamDict(
            debug=False,
            plot_solution=False,
            check_mem_usage=False,
            # restart = False, # Not yet supported
            # restart_time = 0.0, # Not yet supported
            # restart_timestep = 0, # Not yet supported
            )
        return params

    def solve(self):

        # FIXME: Handle restart stuff, get from old ns script (see scratch/oldscripts/ns)
        # FIXME: Pick other details to reuse from old ns script, here or other places
        self.time = time()
        self.cumtime = 0
        self.scheme.solve(self.problem, self.update)

    def update(self, u, p, t, timestep):
        solve_time = time()-self.time
        self.time = time()
                       
        # Run postprocessor
        if self.postprocessor:
            self.postprocessor.update_all(u, p, t, timestep, self.problem)
        pp_time = time()-self.time

        # Update time spent
        self.time = time()
        self.cumtime += (solve_time+pp_time)
        
        # Plot solution
        if self.params.plot_solution and not self.scheme.params.segregated:
            plot(u)
            plot(p)
        
        
        headflow_print("Timestep %5d finished (t=%.2e, %.1f%%) in %3.1fs (solve: %3.1fs). Time spent: %s Time remaining: %s" \
                                       %(timestep, t, 100*t/self.problem.T, solve_time+pp_time, solve_time, \
                                         time_to_string(self.cumtime), time_to_string((self.problem.T-t)*self.cumtime/t)))

    
