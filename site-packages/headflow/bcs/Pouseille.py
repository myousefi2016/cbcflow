
from dolfin import *
from numpy import floor, array, sqrt
from scipy.interpolate import UnivariateSpline
from BC_base import BC_base, area_and_center, find_average_normal

class _PouseilleExpression(Expression):
    #def __init__(self, normal_component, radius, center, velocity_profile, period): # Subclassing the expression class restricts the number of arguments, args is therefore a dict of arguments.
    def __init__(self, args):
        Expression.__init__(self)

        '''
        self.a = radius
        self.center = center
        #self.peakvelocity = peakvelocity
        self.velocity_profile = velocity_profile
        self.period = period
        self.normal_component = normal_component
        '''

        self.a = args["radius"]
        self.center = args["center"]
        self.velocity_profile = args["velocity_profile"]
        self.period = args["period"]
        self.normal_component = args["normal_component"]

        self.t = 0.0
        self.scale_value = 1.0

    def set_t(self, t):
        self.t = t-floor(t/self.period)*self.period
        
    def _set_scale_value(self, scale_value):
        self.scale_value = scale_value

    def eval(self, value, x):
        r = sqrt((x[0]-self.center[0])**2+(x[1]-self.center[1])**2+(x[2]-self.center[2])**2)
        y = r/self.a

        profile = 1-y**2
        val = -self.velocity_profile(self.t)*profile

        value[0] = self.normal_component*self.scale_value*val



class Pouseille(BC_base, list):
    '''
    Generates a list of expressions in the form of a Pouseille/parabolic profile.
    '''
    #def __init__(self, coeffs, mesh, indicator, method='peak', scale_value=None, scale_mode='flux', segregated=False):
    def __init__(self, coeffs, mesh, indicator, scale_to=None):
        assert(isinstance(mesh, Mesh))

        self.mesh = mesh
        self.ind = indicator

        # Find radius and center
        A, center = area_and_center(mesh, self.ind)
        radius = sqrt(A/pi)

        # Find velocity profile
        x,y = zip(*coeffs)
        x = array(x)
        y = array(y)
        velocity_profile = UnivariateSpline(x,y,s=0, k=1)
        self.period = max(x)

        # Get normal
        normal = find_average_normal(mesh, self.ind)

        # Create Expressions
        for i in range(3):
            args = {"normal_component": normal[i], "radius": radius, "center": center, "velocity_profile": velocity_profile, "period": self.period}
            self.append(_PouseilleExpression(args))
            
        if scale_to is not None:
            scale_factor = self.scale(scale_to)
            for e in self: e._set_scale_value(scale_factor)
