
from ..dol import *

import numpy as np
from scipy.interpolate import UnivariateSpline

from BC_base import BC_base, get_area, get_center, get_average_normal

class _PouseilleExpression(Expression):
    #def __init__(self, normal_component, radius, center, velocity_profile, period): # Subclassing the expression class restricts the number of arguments, args is therefore a dict of arguments.
    def __init__(self, args):
        Expression.__init__(self)

        '''
        self.a = radius
        self.center = center
        #self.peakvelocity = peakvelocity
        self.velocity_profile = velocity_profile
        self.period = period
        self.normal_component = normal_component
        '''

        self.a = args["radius"]
        self.center = args["center"]
        self.velocity_profile = args["velocity_profile"]
        self.period = args["period"]
        self.normal_component = args["normal_component"]

        self.t = 0.0
        self.scale_value = 1.0

    def set_t(self, t):
        self.t = t % self.period

    def _set_scale_value(self, scale_value):
        self.scale_value = scale_value

    def eval(self, value, x):
        c = self.center
        d = len(c)
        r2 = sum((x[i]-c[i])**2 for i in xrange(d))
        y2 = r2 / self.a**2
        val = -self.velocity_profile(self.t) * (1 - y2)
        value[0] = self.normal_component * self.scale_value * val


class Pouseille(BC_base, list):
    '''
    Generates a list of expressions in the form of a Pouseille/parabolic profile.
    '''
    #def __init__(self, coeffs, mesh, indicator, method='peak', scale_value=None, scale_mode='flux', segregated=False):
    def __init__(self, coeffs, mesh, indicator, scale_to=None, facet_domains=None):
        assert(isinstance(mesh, Mesh))

        self.mesh = mesh
        self.ind = indicator

        # TODO: Always require facet_domains
        if facet_domains is None:
            facet_domains = mesh.domains().facet_domains()
            assert facet_domains is not None, "Missing facet domains!"
        self.facet_domains = facet_domains

        # Find radius and center
        A = get_area(mesh, self.ind, self.facet_domains)
        center = get_center(mesh, self.ind, self.facet_domains)
        radius = np.sqrt(A/pi)

        # Get normal
        normal = get_average_normal(mesh, self.ind, self.facet_domains)

        # Find velocity profile
        x,y = zip(*coeffs)
        x = np.array(x)
        y = np.array(y)

        velocity_profile = UnivariateSpline(x,y,s=0, k=1)

        self.period = max(x)

        # Create Expressions
        d = len(normal)
        for i in xrange(d):
            args = {"normal_component": normal[i], "radius": radius, "center": center, "velocity_profile": velocity_profile, "period": self.period}
            self.append(_PouseilleExpression(args))

        if scale_to is not None:
            scale_factor = self.scale(scale_to)
            for e in self: e._set_scale_value(scale_factor)
