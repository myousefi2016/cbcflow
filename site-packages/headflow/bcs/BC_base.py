#from dolfin import assemble, Constant, ds, FunctionSpace, Function, DirichletBC, Expression, sqrt
from dolfin import *

def area_and_center(mesh, ind):
    A = assemble(Constant(1)*ds(ind), mesh=mesh)
    V = FunctionSpace(mesh, "CG", 1)
    x = mesh.ufl_cell().x
    center = [assemble(x[i]*ds(ind), mesh=mesh) / A for i in xrange(3)]
    return A, center

def find_average_normal(mesh, ind):
    n = FacetNormal(mesh)
    x = assemble(n[0]*ds(ind), mesh=mesh)
    y = assemble(n[1]*ds(ind), mesh=mesh)
    z = assemble(n[2]*ds(ind), mesh=mesh)
    xyz_len = sqrt(x**2+y**2+z**2)
    normal = [x/xyz_len, y/xyz_len, z/xyz_len]
    return normal

class BC_base(object):
    def __init__(self):
        pass

    def _update(self, t, u):
        return

    def set_t(self, t):
        self.t = t-floor(t/self.period)*self.period
