#from dolfin import assemble, Constant, ds, FunctionSpace, Function, DirichletBC, Expression, sqrt
from dolfin import *


class BC_base(object):
    def __new__(cls, *args, **kwargs):
        if cls is BC_base:
            raise RuntimeError("BC_base isn't meant to be instantiated")
        else:
            return super(BC_base, cls).__new__(cls, *args, **kwargs)
    
    def __init__(self):
        pass
        
    def area_and_center(self, mesh):
        A = assemble(Constant(1)*ds(self.ind), mesh=mesh)
        V = FunctionSpace(mesh, "CG", 1)
        self.center = []
        for i in range(3):
            p = Function(V)
            bc = DirichletBC(V, Expression("x[%d]" %i),self.ind)
            bc.apply(p.vector())
            self.center.append(assemble(p*ds(self.ind), mesh=mesh)/A)

        return A, self.center

    def find_average_normal(self, mesh):
        n = FacetNormal(mesh)
        x = assemble(n[0]*ds(self.ind), mesh=mesh)
        y = assemble(n[1]*ds(self.ind), mesh=mesh)
        z = assemble(n[2]*ds(self.ind), mesh=mesh)      

        xyz_len = sqrt(x**2+y**2+z**2)

        self.normal = [x/xyz_len, y/xyz_len, z/xyz_len]
        
        return self.normal
        
    def _update(self, t, u):
        return
        
    def set_t(self, t):
        self.t = t-floor(t/self.period)*self.period
    