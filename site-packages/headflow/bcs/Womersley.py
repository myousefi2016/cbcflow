
from ..dol import *

import numpy as np

from scipy.interpolate import UnivariateSpline
from scipy.integrate import simps
from scipy.special import jn

from .BC_base import BC_base, get_area, get_center, get_average_normal

def fourier_coefficients(x, y, T, N=25):
    '''From x-array and y-spline and period T, calculate N complex Fourier coefficients.'''
    omega = 2*pi/T
    ck = []
    ck.append(1/T*simps(y(x), x))
    for n in range(1,N):
        c = 1/T*simps(y(x)*np.exp(-1j*n*omega*x), x)
        ck.append(2*c)
    return ck

class _WomersleyExpression(Expression):
    #def __init__(self, normal_component, radius, center, velocity_profile, period): # Subclassing the expression class restricts the number of arguments, args is therefore a dict of arguments.
    def __init__(self, args):
        Expression.__init__(self)

        self.a = args["radius"]
        self.center = args["center"]
        self.Qn = args["Qn"]
        self.period = args["period"]
        self.normal_component = args["normal_component"]
        nu = args["nu"]

        self.N = len(self.Qn)

        self.t = 0.0
        self.scale_value = 1.0

        self.calculate_bessel_functions(self.N, self.a, self.period, nu)
        self.all_sum_terms = {}

    def calculate_bessel_functions(self, N, a, T, nu):
        '''Calculate the Bessel functions of the Womersley profile'''

        # TODO: Is this the same in 2D?

        self.omega = 2*pi/T
        self.beta = [0+0j]*N
        self.jn0_betas = [0+0j]*N
        self.jn1_betas = [0+0j]*N

        for n in range(1,self.N):
            alfa_n = a*np.sqrt(self.omega*n/nu)
            self.beta[n] = alfa_n*np.sqrt(1j**3)
            self.jn0_betas[n] = jn(0, self.beta[n])
            self.jn1_betas[n] = jn(1, self.beta[n])

    def set_t(self, t):
        self.t = t % self.period

    def _set_scale_value(self, scale_value):
        self.scale_value = scale_value

    def eval(self, value, x):
        sum_terms = self.get_sum_terms(x)

        val = sum_terms[0]

        for n in xrange(1, self.N):
            val += np.exp(1j*self.omega*n*self.t)*sum_terms[n]

        val = val.real
        value[0] = -self.normal_component*self.scale_value*val


    def get_sum_terms(self, x):
        key = (x[0],x[1],x[2])
        sum_terms = self.all_sum_terms.get(key)
        if sum_terms is None:

            sum_terms = np.zeros(self.N, dtype=np.complex)

            c = self.center
            d = len(c)
            r = np.sqrt(sum((x[i]-c[i])**2 for i in xrange(d)))
            y = r/self.a

            sum_terms[0] = 2*self.Qn[0]*(1-y**2)/(pi*self.a**2)

            for n in range(1, self.N):
                sum_terms[n] = self.Qn[n]/(pi*self.a**2)
                sum_terms[n] *= (1-jn(0, self.beta[n]*y)/self.jn0_betas[n])/(1-2*self.jn1_betas[n]/(self.beta[n]*self.jn0_betas[n]))

            self.all_sum_terms[key] = sum_terms

        return sum_terms


class Womersley(BC_base, list):
    '''
    Generates a list of expressions in the form of a Womersley profile.
    '''
    #def __init__(self, coeffs, mesh, indicator, method='peak', scale_value=None, scale_mode='flux'):
    #def __init__(self, coeffs, mesh, indicator, nu, scale_value=None, scale_mode='flux'):
    def __init__(self, coeffs, mesh, indicator, nu, scale_to=None, facet_domains=None):
        assert(isinstance(mesh, Mesh))

        self.mesh = mesh
        self.ind = indicator

        # TODO: Always require facet_domains
        if facet_domains is None:
            facet_domains = mesh.domains().facet_domains()
            assert facet_domains is not None, "Missing facet domains!"
        self.facet_domains = facet_domains

        #dsi = ds[self.facet_domains](self.ind)

        # Find radius and center
        A = get_area(mesh, self.ind, self.facet_domains)
        center = get_center(mesh, self.ind, self.facet_domains)
        radius = np.sqrt(A/pi)

        # Get normal
        normal = get_average_normal(mesh, self.ind, self.facet_domains)

        # Coefficients of velocity profile
        x,y = zip(*coeffs)
        x = np.array(x)
        y = np.array(y)

        self.period = max(x)

        # Get a highly resolved function of the input by linear interpolation
        f = UnivariateSpline(x,y,k=1, s=0)
        xx = np.linspace(0,self.period, 1001)

        Qn = fourier_coefficients(xx, f, self.period)

        # Create Expressions
        d = len(normal)
        for i in xrange(d):
            args = {"normal_component": normal[i], "radius": radius, "center": center, "Qn": Qn, "period": self.period, "nu": nu}
            self.append(_WomersleyExpression(args))

        if scale_to is not None:
            scale_factor = self.scale(scale_to)
            for e in self: e._set_scale_value(scale_factor)
