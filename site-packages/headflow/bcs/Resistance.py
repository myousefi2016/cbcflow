from ..dol import *

def compute_resistance_value(C, u, ind, facet_domains=None):
    # TODO: This is messy, we need more control over the types u can have
    if not isinstance(u, ufl.Expr):
        u = as_vector(u)
    try:
        mesh = u[0].function_space().mesh()
    except:
        mesh = u.function_space().mesh()

    # TODO: Always require facet_domains
    if facet_domains is None:
        facet_domains = mesh.domains().facet_domains()
        assert facet_domains is not None, "Assuming a mesh with attached facet domains!"
    dsi = ds[facet_domains](ind)

    n = FacetNormal(mesh)
    form = dot(u, n)*dsi

    return C*assemble(form)

# TODO: [martin] don't understand this design, why subclassing Constant? 
class Resistance(Constant):
    def __init__(self, C, u, ind, facet_domains=None):
        Constant.__init__(self, compute_resistance_value(C, u, ind, facet_domains))
