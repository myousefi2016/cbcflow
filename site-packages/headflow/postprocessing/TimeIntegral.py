from .MetaPPField import MetaPPField
from dolfin import *

class TimeIntegral(MetaPPField):
    def compute(self, pp, spaces, problem):
        u = pp.get(self.valuename)

        # NB! Easiest to ignore initial solution, assuming that's ok at least for now.
        t1 = pp.get("t")
        t0 = pp.get("t", -1)
        dt = t1 - t0

        # Create placeholder for sum the first time
        if not hasattr(self, "_sum"):
            self._count = 0
            if isinstance(u, float):
                self._sum = 0.0
            else:
                self._sum = Function(u.function_space())

        # Accumulate using backward euler integration
        if isinstance(u, float):
            self._sum += u
        else:
            self._sum.vector().axpy(dt, u.vector()) # FIXME: Validate this, not tested!
        self._count += 1
        return self._sum
