def update_check(obj, t, timestep):
    datadict = obj.get_data()
    
    if obj.start_timestep > timestep or timestep > obj.end_timestep:
        return False

    if obj.start_time > t or t > obj.end_time:
        return False
    
    if timestep-datadict["timestep"] < obj.step_frequency:
        return False
    
    if t-datadict["time"] < obj.time_frequency:
        return False
    
    # Else
    return True

class PostProcessorBase(object):     
    def __new__(cls, *args, **kwargs):
        if cls is PostProcessorBase:
            raise RuntimeError(
                "PostProcessorBase isn't meant to be instantiated")
        else:
            return super(PostProcessorBase, cls).__new__(cls, *args, **kwargs)
        
    def __init__(self):
        self.list_all = []
    
    def update_all(self, u, p, t, timestep):
        for inst in self.list_all:
            if update_check(inst, t, timestep):
                inst.update(u,p,t,timestep)

    def add_field(self, field):
        self.list_all.append(field)