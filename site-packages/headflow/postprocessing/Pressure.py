from .PPField import PPField
from dolfin import Function, project, Expression
from ..core.spaces import NSSpacePoolMixed, NSSpacePoolSplit, NSSpacePoolSegregated

class Pressure(PPField):
    def compute(self, pp, spaces, problem):
        # Hack to get given p in whatever format it has
        p = pp._p

        # TODO: Should we scale p by density here so we get the physical pressure in postprocessing?
        #       Or by a factor provided by the scheme?
        #       However the problem interface relates to the scaled pressure,
        #       as well as e.g. restarting. Maybe add a PhysicalPressure field with proper scaling?

        # Convert p into a Function if the scheme is mixed
        if isinstance(spaces, NSSpacePoolSplit):
            pass
        elif isinstance(spaces, NSSpacePoolMixed):
            p = project(p, spaces.Q)
        elif isinstance(spaces, NSSpacePoolSegregated):
            pass

        assert isinstance(p, Function)
        return p
