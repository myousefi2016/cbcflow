from .PPField import PPField
from dolfin import Function, project, as_vector, Expression
from ..core.spaces import NSSpacePoolMixed, NSSpacePoolSplit, NSSpacePoolSegregated

class Velocity(PPField):
    def convert(self, pp, spaces, problem):
        # Hack to get given u in whatever format it has,
        # avoiding circular reference to this field
        u = pp._solution["Velocity"]

        # Convert u into a Function if the scheme is segregated or mixed
        if isinstance(spaces, NSSpacePoolSplit):
            pass
        elif isinstance(spaces, NSSpacePoolMixed):
            # Assigning from subfunction of V*Q to V is not implemented in dolfin yet TODO
            u = project(as_vector(u), spaces.V)
        elif isinstance(spaces, NSSpacePoolSegregated):
            # Interpolate is much faster than project, assign would be better TODO
            if not hasattr(self, "_u"):
                self._u = Function(spaces.V)
            us = [("u%d"%i, u[i]) for i in range(len(u))]
            e = Expression(tuple(uc[0] for uc in us), **dict(us))
            self._u.interpolate(e)
            u = self._u
        assert isinstance(u, Function)
        
        return u
