from .ppfield import PPField
from ..core.utils import sigma
from dolfin import *

class TimeDerivative(PPField):
    def __init__(self, value, params=None):
        PPField.__init__(self, params)
        
        # FIXME: Make TimeDerivative(TimeDerivative(...)) work
        if isinstance(value, TimeDerivative) or "TimeDerivative" in value:
            raise Exception("Unable to create TimeDerivative of TimeDerivative. Use SecondTimeDerivative.")
        
        if isinstance(value, PPField):
            value = value.name
        self.valuename = value
        self.name = "TimeDerivative("+value+")"
        self.touched = 0

    def compute(self, pp, problem):
        u1 = pp.get(self.valuename)
        u0 = pp.get(self.valuename, -1)

        t1 = pp.get("t")
        t0 = pp.get("t", -1)
        dt = t1-t0
        
        #TODO: Compute derivative (depending on u1/u0 format)
        return "(u1-u0)/dt"
        