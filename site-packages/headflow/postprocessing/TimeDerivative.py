from .ppfield import PPField
from dolfin import *

class TimeDerivative(PPField):
    def __init__(self, value, params=None):
        PPField.__init__(self, params)

        # Store only name, don't need the field
        if isinstance(value, PPField):
            value = value.name
        self.valuename = value

        # FIXME: Make TimeDerivative(TimeDerivative(...)) work
        if "TimeDerivative" in value:
            raise Exception("Unable to create TimeDerivative of TimeDerivative. Use SecondTimeDerivative.")

    @property
    def name(self):
        return "TimeDerivative(%s)" % self.valuename

    def compute(self, pp, spaces, problem):
        u1 = pp.get(self.valuename)
        u0 = pp.get(self.valuename, -1)

        t1 = pp.get("t")
        t0 = pp.get("t", -1)
        dt = t1 - t0

        # Create function to hold result first time,
        # assuming u1 and u0 are Functions in same space
        if not hasattr(self, "_du"):
            self._du = Function(u1.function_space())

        # Compute finite difference derivative # FIXME: Validate this, not tested!
        self._du.zero()
        self._du.vector().axpy(+1.0/dt, u1)
        self._du.vector().axpy(-1.0/dt, u0)
        return self._du
