def lessthan(a,b):
    return a < b

def greaterthan(a,b):
    return a > b

class PPFieldBase(object):
    def __new__(cls, *args, **kwargs):
        if cls is PPFieldBase:
            raise RuntimeError(
                "PPFieldBase isn't meant to be instantiated")
        else:
            return super(PPFieldBase, cls).__new__(cls, *args, **kwargs)
    
    
    def __init__(self, parent=None, **kwargs):       
        self.step_frequency = property()
        self.time_frequency = property()

        # Set default values
        self._start = -1
        self._end = 1e16
        self._start_timestep = -1
        self._end_timestep = 1e16
        self._start_time = -1.0
        self._end_time = 1e16
    
        self.step_frequency = 1
        self.time_frequency = 1e-16
        
        self._datadict = {"timestep": 0, "time":0.0, "data": None}

        # Set keyword arguments
        self.parent = parent

        for k, v in kwargs.iteritems():
            setattr(self, k, v)

    # FIXME: Make properties share getters and setters  
    ### Properties: start*
    @property
    def start_timestep(self):
        return self._start_timestep
    
    @start_timestep.setter
    def start_timestep(self, value):
        if self._start_timestep == -1 or value < self._start_timestep:
            self._start_timestep = value

        self._adjust_parent_instance("start_timestep", lessthan)
        
    @property
    def start_time(self):
        return self._start_time
    
    @start_time.setter
    def start_time(self, value):
        if self._start_time == -1 or value < self._start_time:
            self._start_time = value
        self._adjust_parent_instance("start_time", lessthan)
    
    ### Properties: end*
    @property
    def end_timestep(self):
        return self._end_timestep
    
    @end_timestep.setter
    def end_timestep(self, value):
        if self.end_timestep == 1e16 or value > self.end_timestep:
            self._end_timestep = value
        self._adjust_parent_instance("end_timestep", greaterthan)
        
    @property
    def end_time(self):
        return self._end_time
    
    @end_time.setter
    def end_time(self, value):
        if self.end_time == 1e16 or value > self.end_time:
            self._end_time = value

        self._adjust_parent_instance("end_time", greaterthan)
        
    ### Data handling
    def set_data(self, t, timestep, data):
        self._datadict["time"] = t
        self._datadict["timestep"] = timestep
        self._datadict["data"] = data    
    
    def get_data(self):
        return self._datadict
        
    ### Help functions         
    def _adjust_parent_instance(self, prop, change_condition):
        if self.parent == None:
            return
        if change_condition(getattr(self, prop), getattr(self.parent, prop)):
            exec("self.parent.%s = self.%s" %(prop, prop))

                            