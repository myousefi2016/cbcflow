
from .ppfieldbase import PPFieldBase
from dolfin import Function, VectorFunctionSpace, project, as_vector

class Velocity(PPFieldBase):
    def __init__(self, **kwargs):
        PPFieldBase.__init__(self, **kwargs)

    def before_first_update(self, u, p, t, timestep, problem):

        if isinstance(u, Function):
            # We can just use u in update with no assignment
            assert u.rank() == 1
        else:
            if isinstance(u[0], Function): # Segregated
                d = u[0].function_space().ufl_element().degree()
            else: # Mixed
                d = 2 # FIXME: Hardcoded to 2 to make mixed code work!

            # Create a placeholder function # TODO: It would be nice if the framework could automate this process somehow
            self.V = VectorFunctionSpace(problem.mesh, "CG", d) # FIXME: Need spaces as input to avoid this
            self.u_vec = Function(self.V, name="Velocity")

    def update(self, u, p, t, timestep, problem):
        # Copy to a vector valued function before storing
        if not isinstance(u, Function):
            self.u_vec.assign(project(as_vector(u), self.V)) # TODO: Need subfunction assign to avoid projection
            u = self.u_vec

        self.set_data(t, timestep, u)

