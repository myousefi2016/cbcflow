
from ...dol import *
from .ppfieldbase import PPFieldBase

class Velocity(PPFieldBase):
    def __init__(self, **kwargs):
        PPFieldBase.__init__(self, **kwargs)

    def before_first_update(self, u, p, t, timestep, problem):
        if isinstance(u[0], Function):
            d = u[0].function_space().ufl_element().degree()
            self.V = VectorFunctionSpace(problem.mesh, "CG", d)
            self.u_vec = Function(self.V)#, name="Velocity") # TODO: Can we enable this? Requires fairly new dolfin.
        elif not isinstance(u, Function):
            # FIXME: Hardcoded to 2 to make mixed code work!
            d = 2
            self.V = VectorFunctionSpace(problem.mesh, "CG", d)
            self.u_vec = Function(self.V, name="Velocity") # Mixed version won't work without the dolfin that has name= anyway

    def update(self, u, p, t, timestep, problem):
        # TODO: Streamline fetching of u in vector function format
        if isinstance(u, list):
            u = as_vector(u)
        if not isinstance(u, Function):
            self.u_vec.assign(project(u, self.V))
            u = self.u_vec

        self.set_data(t, timestep, u)
