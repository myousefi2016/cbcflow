
from ...dol import *
import numpy as np
import os

class PointCloudProbe:
    def __init__(self, x_list, V):
        probe = self.compile_probe_code()

        # assume x is  a list for now
        probes = []
        for x in x_list:
            p = probe.Probe(x, V)
            probes.append(p)
        self.probes = probes

    def compile_probe_code(self):
        header_file = open("Probe/Probe.h") # FIXME: Can't just get the code like this, we're in an arbitrary directory!
        code = "\n".join(header_file.readlines())
        compiled_module = compile_extension_module(code=code, \
            source_directory="Probe", sources=["Probe.cpp"], \
            include_dirs=[".", os.path.abspath("Probe")])
        return    compiled_module

    def eval(self,u):
        values = []
        for probe in self.probes:
            probe.eval(u)
            values.append(probe.get_probe(0))
        return values

def test(): # TODO: Move to tests
    mesh = UnitCubeMesh(10, 10, 10)
    V = FunctionSpace(mesh, 'CG', 1)

    x = [np.array((0.4, 0.5, 0.5)),
         np.array((0.5, 0.5, 0.5)),
         np.array((0.6, 0.5, 0.5))]

    probes = PointCloudProbe(x, V)

    # Just create some random data to be used for probing
    u0 = interpolate(Expression('x[0]'), V)
    print probes.eval(u0)

if __name__ == '__main__':
    test()
