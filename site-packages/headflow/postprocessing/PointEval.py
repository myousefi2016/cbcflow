from .PPField import PPField
from ..utils import *
import numpy as np

class PointEval(PPField):
    def __init__(self, field, points, params=None):
        PPField.__init__(self, params)
        
        # Store only name, don't need the field
        if isinstance(field, PPField):
            value = field.name
        self.valuename = field
        
        # List of points
        self.points = points
    
    def before_first_compute(self, pp, spaces, problem):
        u = pp.get(self.valuename)
        
        V = u.function_space()
        dim = V.mesh().geometry().dim()

        pointlist = []
        self.results = {}
        for p in self.points:
            if dim == 2:
                coords = [p.x(), p.y()]
            elif dim == 3:    
                coords = [p.x(), p.y(), p.z()]
            pointlist += coords
            self.results[repr(coords)] = None
            
        pointarray = np.array(pointlist)
        
        self.probes = Probes(pointarray, V)


    def compute(self, pp, spaces, problem):
        u = pp.get(self.valuename)
        self.probes.eval(u)
        results = self.probes.array()
        
        for i, p in enumerate(self.results.keys()):
            self.results[p] = results[i]
        print self.results
        return self.results
